package com.tank.jvm.bytecode;

/**
 * @author tank
 * @create 2019/12/05 23:32
 */
/*

    现代JVM在执行Java代码的时候，通常会将解释执行和编译执行结合到一起。

    所谓解释执行，就是通过解释器读取字节码，遇到相应的指令就去执行该指令。
    所谓编译执行，就是通过即时编译器（Just In Time，JIT）将字节码转换为机器码执行；现代JVM会根据热点代码来生成
    相应的本地机器码。

    基于栈的指令与基于寄存器的指令集之间的关系

    1. JVM执行指令时所采取的方式是基于栈的指令集。
    2. 基于栈的指令集主要的操作有入栈和出栈两种。
    3. 基于栈的指令集的优势在于它可以在不同的平台之间移植，而基于寄存器的指令集是与硬件架构紧密关联的，无法做到可移植。
    4. 基于栈的指令集的缺点在于完成相同的操作，指令数量通常需要比基于寄存器的指令集数量要多；基于栈的指令集是在内存中完成操作的，
       而基于寄存器的指令集是直接由CPU来执行的，它是在高速缓冲区中执行的，速度要快很多。虽然虚拟机可以采用一些优化手段，
       但总体来说，基于栈的指令集的执行速度要慢一些。

    例：
    运算表达式 "2-1"
    基于栈的指令集如下：
    1.iconst_1
    2.iconst_2
    3.isub
    4.istore_0

    isub是将在操作数栈上的两个数弹出并运算
    iconst_1是将1压入操作数栈
    istore_1是将栈顶的数弹出并放到索引为1的栈帧中
    ....

    基于寄存器的指令集如下：

    1.mov(将 2 mov到寄存器中)
    2.sub(将寄存器中的 2 减去 1)

 */
public class MyTest8 {
}
